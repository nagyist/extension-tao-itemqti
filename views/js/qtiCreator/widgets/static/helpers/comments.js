/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2023 (original work) Open Assessment Technologies SA;
 */
define(function () {
    'use strict';

    const autogeneratedCodeStartCommentText = ' autogenerated code, do not edit ';
    const autogeneratedCodeEndCommentText = ' end of autogenerated code ';
    const autogeneratedCodeStartComment = `<!--${autogeneratedCodeStartCommentText}-->`;
    const autogeneratedCodeEndComment = `<!--${autogeneratedCodeEndCommentText}-->`;

    const isCommentNode = (node, text) =>
        node &&
        node.nodeType === Node.COMMENT_NODE &&
        node.textContent &&
        decodeURIComponent(node.textContent).includes(text);

    const hasAutogeneratedCodeStartComment = el => {
        let commentFound = false;
        const previousNode = el.previousSibling;

        if (!previousNode) {
            return false;
        }

        if (previousNode.textContent && previousNode.textContent.trim().length === 0) {
            commentFound = hasAutogeneratedCodeStartComment(previousNode);
        } else {
            //ckeditor  wraps comments and URIEncodes it
            //so that is the reason to use decodeURIComponent
            commentFound = isCommentNode(previousNode, autogeneratedCodeStartCommentText);
        }
        return commentFound;
    };

    const hasAutogeneratedCodeEndComment = el => {
        let commentFound = false;
        const nextNode = el.nextSibling;

        if (!nextNode) {
            return false;
        }

        if (nextNode.textContent && nextNode.textContent.trim().length === 0) {
            commentFound = hasAutogeneratedCodeEndComment(nextNode);
        } else {
            //ckeditor  wraps comments and URIEncodes it
            //so that is the reason to use decodeURIComponent
            commentFound = isCommentNode(nextNode, autogeneratedCodeEndCommentText);
        }
        return commentFound;
    };
    const isWrapped = $el => hasAutogeneratedCodeStartComment($el[0]) && hasAutogeneratedCodeEndComment($el[0]);

    return {
        wrapWithAutogeneratedComment: $el => {
            if (!isWrapped($el)) {
                $el.before(autogeneratedCodeStartComment);
                $el.after(autogeneratedCodeEndComment);
            }
        },

        removeAutogeneratedComments: text => {
            return text.replaceAll(autogeneratedCodeStartComment, '').replaceAll(autogeneratedCodeEndComment, '');
        }
    };
});
